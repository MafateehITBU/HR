// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ClockInMethod {
  FINGERPRINT
  FACE_RECOGNITION
  MANUAL
  RFID
  MOBILEAPP
}

enum AuditType {
  REGULATION
  POLICY
}

enum AuditStatus {
  PENDING
  COMPLETED
  FAILED
}

enum Shifts {
  A
  B
  C
}

enum LeaveType {
  ANNUAL
  SICK
  LEAVE
  PAID_BY_EMPLOYEE
}

enum LeaveRequestStatus {
  APPROVED
  REJECTED
  UNDER_CONSIDERATION
}

enum PayPeriod {
  MONTHLY
  WEEKLY
}

enum IncentiveType {
  PERFORMANCE_BONUS
  SALES_COMMISSION
  REFERRAL
}

enum IncentivePeriod {
  MONTHLY
  QUARTERLY
  ANNUALLY
}

enum CompensationBenefit {
  HEALTH_INSURANCE
  RETIREMENT_CONTRIBUTIONS
  TRANSPORTATION
}

model GM {
  id             Int      @id @default(autoincrement())
  name           String
  email          String   @unique
  password_hash  String
  phone          String?
  profilePicture String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Department {
  id               Int        @id @default(autoincrement())
  name             String
  departmentHeadID Int?
  empCount         Int        @default(0)
  employees        Employee[]
  jobTitles        JobTitle[]
  teams            Team[]
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}

model CompanyShift {
  id             Int          @id @default(autoincrement())
  shift          Shifts
  startTime      String
  endTime        String
  companyRulesId Int
  companyRules   CompanyRules @relation(fields: [companyRulesId], references: [id], onDelete: Cascade)

  @@unique([shift, companyRulesId]) // A company can only define each shift once
}

model Company {
  id                 Int           @id @default(autoincrement())
  name               String
  email              String        @unique
  password_hash      String
  phone              String
  profilePicture     String?
  subscriptionDate   DateTime?
  subscriptionType   String?
  subscriptionStatus String?
  description        String?
  companyRulesId     Int?          @unique
  companyRules       CompanyRules? @relation(fields: [companyRulesId], references: [id])
  createdAt          DateTime      @default(now())
  employees          Employee[]
}

model CompanyRules {
  id               Int            @id @default(autoincrement())
  sickLeaveDays    Int
  annualLeaveDays  Int
  leavesDays       Int
  maxCarryOverDays Float
  createdAt        DateTime       @default(now())
  company          Company?
  shifts           CompanyShift[]
}

model Employee {
  id                 Int        @id @default(autoincrement())
  name               String
  email              String     @unique
  password_hash      String
  phone              String?
  dob                DateTime?
  hireDate           DateTime
  bankDetails        String?
  profilePicture     String?
  weeklyWorkingHours Int        @default(50)
  shift              Shifts?
  companyID          Int
  company            Company    @relation(fields: [companyID], references: [id], onDelete: Cascade)
  depID              Int
  department         Department @relation(fields: [depID], references: [id], onDelete: Cascade)
  jobTitleID         Int
  jobTitle           JobTitle   @relation(fields: [jobTitleID], references: [id], onDelete: Cascade)
  teamID             Int?
  team               Team?      @relation(fields: [teamID], references: [id], onDelete: Cascade)
  leadingTeam        Team?      @relation("TeamLead")
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt

  // Relations
  leaveRequests  LeaveRequest[] @relation("RequestingEmployee") // Sent requests
  leaveApprovals LeaveRequest[] @relation("ApprovingEmployee") // Requests to approve

  leaveBalances      LeaveBalance[]
  payrolls           Payroll[]
  payslips           Payslip[]
  compensations      Compensation[]
  bonuses            Bonus[]
  performanceReviews PerformanceReview[] @relation("EmployeeReviews")
  reviewedReviews    PerformanceReview[] @relation("ReviewerReviews")
  policies           Policy[]
  regulations        Regulation[]
  Goal               Goal[]
  Attendance         Attendance[]
}

model JobTitle {
  id          Int          @id @default(autoincrement())
  title       String
  description String?
  depID       Int
  department  Department   @relation(fields: [depID], references: [id], onDelete: Cascade)
  employees   Employee[]
  jobPostings JobPosting[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Team {
  id               Int        @id @default(autoincrement())
  teamName         String
  teamLead         Int?       @unique
  teamLeadEmployee Employee?  @relation("TeamLead", fields: [teamLead], references: [id], onDelete: Cascade)
  depId            Int
  empCount         Int        @default(0)
  department       Department @relation(fields: [depId], references: [id], onDelete: Cascade)
  employees        Employee[]
  goals            Goal[]     @relation("TeamGoals")
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}

model Applicant {
  id                Int         @id @default(autoincrement())
  name              String
  email             String
  phone             String?
  resumeURL         String?
  jobPostingId      Int
  jobPosting        JobPosting  @relation(fields: [jobPostingId], references: [id], onDelete: Cascade)
  coverLetter       String?
  applicationDate   DateTime    @default(now())
  applicationSource String?
  status            String      @default("PENDING")
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  interviews        Interview[]
}

model JobPosting {
  id              Int              @id @default(autoincrement())
  jobTitleId      Int
  jobTitle        JobTitle         @relation(fields: [jobTitleId], references: [id], onDelete: Cascade)
  employmentType  String
  salaryRange     String?
  location        String?
  jobRequirements String?
  deadline        DateTime?
  status          String           @default("ACTIVE")
  applicants      Applicant[]
  jobPostingTrack JobPostingTrack?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now())
}

model JobPostingTrack {
  id              Int        @id @default(autoincrement())
  jobPostingId    Int        @unique
  jobPosting      JobPosting @relation(fields: [jobPostingId], references: [id], onDelete: Cascade)
  applicantsCount Int
  interviews      Int
  hiringStatus    String
}

model Interview {
  id               Int         @id @default(autoincrement())
  applicantId      Int
  applicant        Applicant   @relation(fields: [applicantId], references: [id])
  interviewersIds  Int[]
  interviewDate    DateTime
  location         String?
  status           String
  feedback         String?
  candidateDetails Candidate[]
}

model Candidate {
  id               Int       @id @default(autoincrement())
  name             String
  email            String    @unique
  phone            String
  educationHistory String?
  skills           String[]
  certificates     String[]
  resume           String?
  interviewRecords String?
  interviewId      Int
  interview        Interview @relation(fields: [interviewId], references: [id], onDelete: Cascade)
  status           String
}

model Attendance {
  id             Int            @id @default(autoincrement())
  empId          Int
  employee       Employee       @relation(fields: [empId], references: [id], onDelete: Cascade)
  clockInTime    DateTime
  clockOutTime   DateTime?
  workHours      Float?
  overtimeHours  Float?
  location       String?
  clockInMethod  ClockInMethod?
  breakStartTime DateTime?
  breakEndTime   DateTime?
}

model LeaveRequest {
  id            Int @id @default(autoincrement())
  empId         Int
  approvalEmpId Int

  requester Employee @relation("RequestingEmployee", fields: [empId], references: [id], onDelete: Cascade)
  approver  Employee @relation("ApprovingEmployee", fields: [approvalEmpId], references: [id], onDelete: Cascade)

  leaveType    LeaveType
  startDate    DateTime
  endDate      DateTime
  leaveReason  String?
  sickLeaveImg String?
  status       LeaveRequestStatus @default(UNDER_CONSIDERATION)
}

model LeaveBalance {
  id            Int       @id @default(autoincrement())
  employeeId    Int
  employee      Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  leaveType     LeaveType
  entitlement   Float? // Total entitled leave days
  taken         Float?    @default(0) // Days already taken
  balance       Float     @default(0) // Remaining leave days
  accrualRate   Float? // (e.g. 1.25 days/month)
  carryOverDays Float? // days from the prev year
  updatedAt     DateTime  @updatedAt
  createdAt     DateTime  @default(now())

  @@unique([employeeId, leaveType])
}

model Payroll {
  id           Int       @id @default(autoincrement())
  empId        Int
  employee     Employee  @relation(fields: [empId], references: [id], onDelete: Cascade)
  baseSalary   Float
  deductions   Float     @default(0)
  payPeriod    PayPeriod @default(MONTHLY)
  bonus        Float     @default(0)
  compensation Float     @default(0)
  netPay       Float     @default(0)
  payslips     Payslip[]
}

model Payslip {
  id         Int      @id @default(autoincrement())
  empId      Int
  employee   Employee @relation(fields: [empId], references: [id], onDelete: Cascade)
  dateIssued DateTime
  payrollId  Int
  payroll    Payroll  @relation(fields: [payrollId], references: [id], onDelete: Cascade)
}

model Compensation {
  id            Int                 @id @default(autoincrement())
  empId         Int
  employee      Employee            @relation(fields: [empId], references: [id], onDelete: Cascade)
  effectiveDate DateTime
  effective     Boolean             @default(true)
  benefit       CompensationBenefit
  amount        Float
}

model Bonus {
  id               Int             @id @default(autoincrement())
  empId            Int
  employee         Employee        @relation(fields: [empId], references: [id], onDelete: Cascade)
  bonusAmount      Float
  commissionAmount Float           @default(0)
  incentiveType    IncentiveType
  incentivePeriod  IncentivePeriod
  incentiveReason  String?
  createdAt        DateTime        @default(now())
}

model Goal {
  id                   Int         @id @default(autoincrement())
  title                String
  description          String?
  startDate            DateTime
  endDate              DateTime
  priority             String
  assignedToType       String
  assignedToTeamId     Int?
  assignedToEmployeeId Int?
  goalTracks           GoalTrack[]
  team                 Team?       @relation("TeamGoals", fields: [assignedToTeamId], references: [id], onDelete: Cascade)
  employee             Employee?   @relation(fields: [assignedToEmployeeId], references: [id], onDelete: Cascade)
}

model GoalTrack {
  id              Int      @id @default(autoincrement())
  goalId          Int
  goal            Goal     @relation(fields: [goalId], references: [id], onDelete: Cascade)
  progressUpdates String[]
  milestones      String[]
  challenges      String[]
  comments        String[]
}

model PerformanceReview {
  id           Int      @id @default(autoincrement())
  employeeId   Int
  reviewerId   Int
  reviewDate   DateTime
  score        Int
  comments     String[]
  reviewPeriod String
  reviewStatus String
  employee     Employee @relation("EmployeeReviews", fields: [employeeId], references: [id], onDelete: Cascade)
  reviewer     Employee @relation("ReviewerReviews", fields: [reviewerId], references: [id], onDelete: Cascade)
}

model Policy {
  id            Int      @id @default(autoincrement())
  title         String
  description   String?
  document      String
  effectiveDate DateTime
  authorId      Int
  author        Employee @relation(fields: [authorId], references: [id])
  audits        Audit[]
}

model Regulation {
  id                 Int      @id @default(autoincrement())
  title              String
  description        String?
  status             String
  regulationDate     DateTime
  responsiblePartyId Int
  responsibleParty   Employee @relation(fields: [responsiblePartyId], references: [id])
  audits             Audit[]
}

model Audit {
  id               Int          @id @default(autoincrement())
  type             AuditType?
  policyId         Int?
  policy           Policy?      @relation(fields: [policyId], references: [id])
  regulationId     Int?
  regulation       Regulation?  @relation(fields: [regulationId], references: [id])
  date             DateTime
  findings         String[]
  correctiveAction String?
  status           AuditStatus?
}
